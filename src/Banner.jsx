import React, { useEffect, useState } from 'react';
import axios from 'axios';
import req from './req';
import PlayArrowIcon from '@mui/icons-material/PlayArrow';
import YouTube from 'react-youtube';
import movieTrailer from 'movie-trailer';
import CloseIcon from '@mui/icons-material/Close';

// base url to append with the image title so we can get the movie poster 
const parent_url = "https://image.tmdb.org/t/p/original/";

const Banner = () => {
    // create a State Hook to store movies information.
    const [movies, setMovies] = useState([]);
    const [trailerURL, setTrailerURL] = useState("");

    useEffect(() => {
        async function fetchMedia() {
            // request to API
            const request = await axios.get(req.pullTrending);
            // request movie by id of the random number generated by the math operation
            setMovies(request.data.results[Math.floor(Math.random() * request.data.results.length - 1)]);

            return request;
        }
        // call function to execute
        fetchMedia();
    }, [])

    // truncate function which cuts movies with excessive words.
    function cutshort(str, c){
        return str?.length > c ? str.substr(0, c - 1) + "..." : str;
    }

    // an object from the react-youtube library to display the media player from youtube on our react project
    const opts = {
        height: '100%',
        width: '100%',
        playerVars: {
          // https://developers.google.com/youtube/player_parameters
          autoplay: 1,
        },
    };

    const clickPlay = (movies) => {
        if(trailerURL){
            setTrailerURL("");
        }
        else{
            movieTrailer(movies?.name || movies?.title || movies?.original_title || "")
            .then((url) => {
                const urlParams = new URLSearchParams(new URL(url).search);
                setTrailerURL(urlParams.get("v"));

                // hide the close button on click play
                const close_btn = document.getElementsByClassName("close_btn");
                Array.from(close_btn).forEach((btn) => {
                    btn.style.display = 'block';
                });
            })
            .catch(() => alert("No Trailer Uploaded! Please Try Again Later."));
        }
    };

    // close button is clicked, bring back the banner.
    function clickClose (event) {
        event.target.style.display = 'none'; // Hide the button when clicked
        setTrailerURL("");
    };

  return (
    <>
        {/** create inline styling to set banner image. */}
        <section className='banner' style={{
            backgroundSize: "cover",
            backgroundImage: `url(${parent_url}${movies?.backdrop_path})`,
            backgroundPosition: "center center"
            }}>
            <div className="close_btn" style={{display: "none"}} onClick={clickClose}><CloseIcon/></div>
            <div className="banner_details">
                {/* get title, name OR original name attribute from API depending on what the API used to save movie title */}
                <h2>{cutshort(movies?.title, 24) || cutshort(movies?.name, 24) || cutshort(movies?.original_name, 24)}</h2>
                <div className="banner_description">
                    <h4>{cutshort(movies?.overview, 280)}</h4>
                </div>
                <div className="banner_btn">
                    <button className="play" onClick={() => clickPlay(movies)}><PlayArrowIcon/> Play</button>
                    <button className="info">More Info</button>
                </div>
            </div>
            <div className="banner_shadow"></div>
            {trailerURL && <YouTube videoId={trailerURL} opts={opts} style={{
                display:"flex", position: "absolute", top:"0", left:"0", width: "100%", height: "618px", zIndex: "1000"
                }}
            />}
        </section>
    </>
  )
}

export default Banner